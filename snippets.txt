{
	"RepoGenerico": {
		"prefix": "Gen-GenericRepository-InRepositories",
		"body": [
			"using System.Linq.Expressions;",
			"using Core.Entities;",
			"using Core.Interfaces;",
			"using Infrastructure.Data;",
			"using Microsoft.EntityFrameworkCore;",
			"",
			"namespace Infrastructure.Repositories;",
			"",
			"public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity",
			"{",
			"\tprivate readonly ${Context} _context;",
			"",
			"\tpublic GenericRepository(${Context} context)",
			"\t{",
			"\t\t_context = context;",
			"\t}",
			"",
			"\tpublic virtual void Add(T entity)",
			"\t{",
			"\t\t_context.Set<T>().Add(entity);",
			"\t}",
			"",
			"\tpublic virtual void AddRange(IEnumerable<T> entities)",
			"\t{",
			"\t\t_context.Set<T>().AddRange(entities);",
			"\t}",
			"",
			"\tpublic virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
			"\t{",
			"\t\treturn _context.Set<T>().Where(expression);",
			"\t}",
			"",
			"\tpublic virtual async Task<IEnumerable<T>> GetAllAsync()",
			"\t{",
			"\t\treturn await _context.Set<T>().ToListAsync();",
			"\t\t// return (IEnumerable<T>) await _context.${Entities}.FromSqlRaw(\"SELECT * FROM ${entity}\").ToListAsync();",
			"\t}",
			"",
			"\tpublic virtual async Task<T> GetByIdAsync(int id)",
			"\t{",
			"\t\treturn await _context.Set<T>().FindAsync(id);",
			"\t}",
			"",
			"\tpublic virtual void Remove(T entity)",
			"\t{",
			"\t\t_context.Set<T>().Remove(entity);",
			"\t}",
			"",
			"\tpublic virtual void RemoveRange(IEnumerable<T> entities)",
			"\t{",
			"\t\t_context.Set<T>().RemoveRange(entities);",
			"\t}",
			"",
			"\tpublic virtual void Update(T entity)",
			"\t{",
			"\t\t_context.Set<T>().Update(entity);",
			"\t}",
			"\tpublic virtual async Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(",
            "\t\tint pageIndex,",
            "\t\tint pageSize,",
            "\t\tstring _search",
            "\t)",
            "\t{",
            "\t\tvar totalRegistros = await _context.Set<T>().CountAsync();",
            "\t\tvar registros = await _context",
            "\t\t\t.Set<T>()",
            "\t\t\t.Skip((pageIndex - 1) * pageSize)",
            "\t\t\t.Take(pageSize)",
            "\t\t\t.ToListAsync();",
            "\t\treturn (totalRegistros, registros);",
            "\t}",
			"}"
		],
		"description": "Snippet for GenericRepositoryA class"
	},
	"IGenericRepository": {
		"prefix": "Gen-IGenericRepository-InInterfaces",
		"body": [
			"using System.Linq.Expressions;",
			"using Core.Entities;",
			"",
			"namespace Core.Interfaces;",
			"",
			"public interface IGenericRepository<T> where T : BaseEntity",
			"{",
			"\tTask<T> GetByIdAsync(int Id);",
			"\tTask<IEnumerable<T>> GetAllAsync();",
			"\tIEnumerable<T> Find(Expression<Func<T, bool>> expression);",
			"\t// Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageIndex, int pageSize, string search);",
			"\tvoid Add(T entity);",
			"\tvoid AddRange(IEnumerable<T> entities);",
			"\tvoid Remove(T entity);",
			"\tvoid RemoveRange(IEnumerable<T> entities);",
			"\tvoid Update(T entity);",
			"}"
		]
	},
	"EntityConfiguration": {
		"prefix": "Gen-Entity-InConfiguration",
		"body": [
			"using Core.Entities;",
			"using Microsoft.EntityFrameworkCore;",
			"using Microsoft.EntityFrameworkCore.Metadata.Builders;",
			"",
			"namespace Infrastructure.Data.Configuration;",
			"",
			"public class ${Entity}Configuration : IEntityTypeConfiguration<${Entity}>",
			"{",
			"\tpublic void Configure(EntityTypeBuilder<${Entity}> builder)",
			"\t{",
			"\t\t//Here you can configure the properties using the object 'Builder'.",
			"\t}",
			"}"
		]
	},
	"ToTable": {
		"prefix": "Gen-ToTable-InConfiguration",
		"body": [
			"builder.ToTable(\"${TableName}\");"
		],
		"description": "Snippet to generate ToTable Field"
	},
	"PrimaryKey": {
		"prefix": "Gen-PrimaryKey-AutoIncrement-InConfiguration",
		"body": [
			"builder.HasKey(x => x.${PrimaryKey});",
			"builder.Property(x => x.${PrimaryKey});"
		],
		"description": "Snippet to generate a Primary Key Field"
	},
	"OneToMany": {
		"prefix": "Gen-ForeignKey-OneToMany-InConfiguration",
		"body": [
			"builder.HasOne(x => x.${ComesFrom}).WithMany(x => x.${ComesTo}).HasForeignKey(x => x.${ForeignKey});"
		],
		"description": "Snippet to generate a OneToMany Field"
	},
	"OneToOne": {
		"prefix": "Gen-ForeignKey-OneToOne-InConfiguration",
		"body": [
			"builder.HasOne(x => x.${ComesFrom}).WithOne(x => x.${ComesTo}).HasForeignKey(x => x.${ForeignKey});"
		]
	},
	"Varchar": {
		"prefix": "Gen-Varchar-InConfiguration",
		"body": [
			"builder.Property(x => x.${Varchar}).HasMaxLength(${Length});"
		],
		"description": "Snippet to generate a Varchar Field"
	},
	"RequiredVarchar": {
		"prefix": "Gen-RequiredVarchar-InConfiguration",
		"body": [
			"builder.Property(x => x.${Varchar}).IsRequired().HasMaxLength(${Length});"
		],
		"description": "Snippet to generate a Required Varchar Field"
	},
	"Integer": {
		"prefix": "Gen-Int-InConfiguration",
		"body": [
			"builder.Property(x => x.${Integer}).HasColumnType(\"int\");"
		],
		"description": "Snippet to generate an Integer Field"
	},
	"Date": {
		"prefix": "Gen-Date-InConfiguration",
		"body": [
			"builder.Property(x => x.${Date}).HasColumnType(\"date\");"
		],
		"description": "Snippet to generate a Date Field"
	},
	"Time": {
		"prefix": "Gen-Time-InConfiguration",
		"body": [
			"builder.Property(x => x.${Time}).HasColumnType(\"time\");"
		],
		"description": "Snippet to generate a Time Field"
	},
	"PKNoAutoincrement": {
		"prefix": "Gen-PrimaryKey-NoAutoincrement-InConfiguration",
		"body": [
			"builder.HasKey(x => x.${PrimaryKey});",
			"builder.Property(x => x.${PrimaryKey}).ValueGeneratedNever();"
		],
		"description": "Snippet to generate a Primary Key With No Autoincrement Field"
	},
	"PKStringAnnotationDB": {
		"prefix": "Gen-PrimaryKey-AnnotationDataBase-InConfiguration",
		"body": [
			"builder.Property(x => x.${PrimaryKey}).HasAnnotation(\"MySql:ValueGenerationStrategy\", MySqlValueGenerationStrategy.IdentityColumn).HasMaxLength(${Length});"
		],
		"description": "Snippet to generate a String Primary Key with HasAnnotation Field"
	},
	"PKStringFluent": {
		"prefix": "Gen-PrimaryKey-StringFluent-InConfiguration",
		"body": [
			"builder.HasKey(x => x.${PrimaryKey});",
			"builder.Property(x => x.${PrimaryKey}).HasMaxLength(${Length});"
		],
		"description": "Snnipet to generate a Fluent String Primary Key Field"
	},
	"BuilderProgram": {
		"prefix": "Gen-Builder-AddDbContext-InProgram",
		"body": [
			"",
			"builder.Services.AddDbContext<${Context}>(optionsBuilder =>",
			"{",
			"\tstring connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
			"\toptionsBuilder.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
			"});",
			""
		]
	},
	"ModelBuilder": {
		"prefix": "Gen-ModelBuilder-InContext",
		"body": [
			"protected override void OnModelCreating(ModelBuilder modelBuilder)",
			"{",
			"\tbase.OnModelCreating(modelBuilder);",
			"\tmodelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
			"}",
		]
	},
	"ConectionStringsJson": {
		"prefix": "Gen-ConectionStrings-InJson",
		"body": [
			",",
			"\"ConnectionStrings\": {",
			"\t\"MySqlConex\": \"server=localhost;user=root;password=${SqlPassword};database=${DataBase};\"",
			"}"
		]
	},
	"DbSetContext": {
		"prefix": "Gen-DbSet-InContext",
		"body": [
			"public DbSet<${Entity}> ${Entities} { get; set; }"
		]
	},
	"ConstructorContext": {
		"prefix": "Gen-Constructor-InContext",
		"body": [
			"public ${Context}(DbContextOptions<${Context}> options) : base(options)",
			"{",
			"}"
		]
	},
	"BaseController": {
		"prefix": "Gen-BaseController",
		"body": [
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace API.Controllers;",
			"",
			"[ApiController]",
			"[Route(\"${Route}[controller]\")]",
			"public class BaseController : Controller",
			"{",
			"\t// Here you can type the information you need",
			"}"
		]
	},
	"PrivateInterface": {
		"prefix": "Gen-PrivateInterface-InUnitOfWork",
		"body": [
			"private I${Entity} _${Entities};"
		]
	},
	"ConstructorUnitOfWork": {
		"prefix": "Gen-Constructor-InUnitOfWork",
		"body": [
			"public UnitOfWork(${Context} context)",
			"{",
			"_context = context;",
			"}"
		]
	},
	"PublicInterface": {
		"prefix": "Gen-PublicInterface-InUnitOfWork",
		"body": [
			"public I${Entity} ${Entities}",
            "{",
            "\tget",
            "\t{",
            "\t\tif (_${Entities} == null)",
            "\t\t{",
            "\t\t\t_${Entities} = new ${Entity}Repository(_context); // Remember putting the base in the repository of this entity",
            "\t\t}",
            "\t\treturn _${Entities};",
            "\t}",
            "}"
		]
	},
	"SaveAsync": {
		"prefix": "Gen-Task-SaveAsync-InUnitOfWork",
		"body": [
			"public Task<int> SaveAsync()",
			"{",
			"\treturn _context.SaveChangesAsync();",
			"}"
		],
		"description": "Snippet fot deleting the IUnitOfWork Problem"
	},
	"PublicIUnitOfWork": {
		"prefix": "Gen-PublicInterface-InIUnitOfWork",
		"body": [
			"public I${Entity} ${Entities} { get; }"
		]
	},
	"Task": {
		"prefix": "Gen-Task-SaveAsync-InIUnitOfWork",
		"body": [
			"Task<int> SaveAsync();"
		]
	},
	"HttpGetIEnumerable": {
		"prefix": "Gen-HttpGetIEnumerable-InController",
		"body": [
			"[HttpGet]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"public async Task<ActionResult<IEnumerable<${Entity}Dto>>> Get()",
			"{",
			"\tvar ${entities} = await _unitOfWork.${Entities}.GetAllAsync();",
			"\treturn _mapper.Map<List<${Entity}Dto>>(${entities});",
			"}"
		]
	},
	"HttpGetObjectById": {
		"prefix": "Gen-HttpGetObjectById-InController",
		"body": [
			"[HttpGet(\"{Id}\")]",
            "[ProducesResponseType(StatusCodes.Status200OK)]",
            "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
            "[ProducesResponseType(StatusCodes.Status404NotFound)]",
            "public async Task<ActionResult<${Entity}Dto>> Get(int Id)",
            "{",
            "\tvar ${entity} = await _unitOfWork.${Entities}.GetByIdAsync(Id);",
            "\tif (${entity} == null)",
            "\t{",
            "\t\treturn NotFound();",
            "\t}",
            "\treturn _mapper.Map<${Entity}Dto>(${entity});",
            "}"
		]
	},
	"HttpPost": {
		"prefix": "Gen-HttpPost-InController",
		"body": [
			"[HttpPost]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"public async Task<ActionResult<${Entity}Dto>> Post(${Entity}Dto ${entity}Dto)",
			"{",
			"var ${entity} = _mapper.Map<${Entity}>(${entity}Dto);",
			"\t_unitOfWork.${Entities}.Add(${entity});",
			"\tawait _unitOfWork.SaveAsync();",
			"\tif (${entity} == null)",
			"\t{",
			"\t\treturn BadRequest();",
			"\t}",
			"${entity}Dto.Id = ${entity}.Id",
			"\treturn CreatedAtAction(nameof(Post), new { id = ${entity}Dto.Id }, ${entity}Dto);",
			"}"
		],
		"description": "Crear un método de API POST"
	},
	"HttpPut": {
		"prefix": "Gen-HttpPut-InController",
		"body": [
			"[HttpPut(\"{id}\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"public async Task<ActionResult<${Entity}Dto>> Put(int id, [FromBody] ${Entity}Dto ${entity}Dto)",
			"{",
			"\tif (${entity}Dto.Id == 0)",
			"\t{",
			"\t\t${entity}Dto.Id = id;",
			"\t}",
			"\tif (${entity}Dto.Id != id)",
			"\t{",
			"\t\treturn NotFound();",
			"\t}",
			"var ${entity} = _mapper.Map<${Entity}>(${entity}Dto);",
			"${entity}Dto.Id = ${entity}.Id",
			"\t_unitOfWork.${Entities}.Update(${entity});",
			"\tawait _unitOfWork.SaveAsync();",
			"\treturn ${entity};",
			"}"
		],
		"description": "Actualizar un registro usando el método PUT"
	},
	"HttpDelete": {
		"prefix": "Gen-HttpDelete-InController",
		"body": [
			"[HttpDelete(\"{id}\")]",
			"[ProducesResponseType(StatusCodes.Status204NoContent)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"public async Task<IActionResult> Delete(int id)",
			"{",
			"\tvar ${entity} = await _unitOfWork.${Entities}.GetByIdAsync(id);",
			"\tif (${entity} == null)",
			"\t{",
			"\t\treturn NotFound();",
			"\t}",
			"\t_unitOfWork.${Entities}.Remove(${entity});",
			"\tawait _unitOfWork.SaveAsync();",
			"\treturn NoContent();",
			"}"
		],
		"description": "Eliminar un registro usando el método DELETE"
	},
	"ConfigureCorsPolicy": {
		"prefix": "Gen-ConfigureCors-InApplication",
		"body": [
			"public static void ConfigureCors(this IServiceCollection services) => services.AddCors(options =>",
			"{",
			"\toptions.AddPolicy(\"CorsPolicy\", builder =>",
			"\t{",
			"\t\tbuilder.AllowAnyOrigin() // WithOrigins(\"https://domain.com\")",
			"\t\t.AllowAnyMethod() // WithMethods(\"GET\", \"POST\")",
			"\t\t.AllowAnyHeader(); // WithHeaders(\"accept\", \"content-type\")",
			"\t});",
			"}); // Remember to put 'static' on the class and to add builder.Services.ConfigureCors(); and app.UseCors(\"CorsPolicy\"); to Program.cs",
		],
		"description": "Configurar una política de CORS en ConfigureServices y Agregar servicios de aplicación al contenedor de dependencias"
	},
	"AddressProperties": {
		"prefix": "Gen-AddressProperties-InEntity",
		"body": [
			"public string TipoVia { get; set; }",
			"public int NumeroPrincipal { get; set; }",
			"public string LetraPrincipal { get; set; }",
			"public string Bis { get; set; }",
			"public string LetraSecundaria { get; set; }",
			"public string CardinalPrimario { get; set; }",
			"public int NumeroSecundario { get; set; }",
			"public string LetraTerciaria { get; set; }",
			"public int NumeroTerciario { get; set; }",
			"public string CardinalSecundario { get; set; }",
			"public string Complemento { get; set; }",
			"public string CodigoPostal { get; set; }"
		],
		"description": "Propiedades para una clase de dirección"
	},
	"MappingProfilesConstructor": {
		"prefix": "Gen-Constructor-InMappingProfiles",
		"body": [
			"public MappingProfiles() // Remember adding : Profile in the class",
			"{",
			"\tCreateMap<${Entity}, ${Entity}Dto>().ReverseMap();",
			"}"
		],
		"description": "Constructor for AutoMapper MappingProfiles"
	},
	"ConfigureRateLimiting": {
		"prefix": "Gen-ConfigureRateLimiting-InApplication",
		"body": [
			"public static void ConfigureRateLimiting(this IServiceCollection services)",
			"{",
			"\tservices.AddMemoryCache();",
			"\tservices.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
			"\tservices.AddInMemoryRateLimiting();",
			"\tservices.Configure<IpRateLimitOptions>(options =>",
			"\t{",
			"\t\toptions.EnableEndpointRateLimiting = true;",
			"\t\toptions.StackBlockedRequests = false;",
			"\t\toptions.HttpStatusCode = 429;",
			"\t\toptions.RealIpHeader = \"X-Real-IP\";",
			"\t\toptions.GeneralRules = new List<RateLimitRule>",
			"\t\t{",
			"\t\t\tnew RateLimitRule",
			"\t\t\t{",
			"\t\t\t\tEndpoint = \"${Endpoint}\",  // Si quiere usar todos ponga *",
			"\t\t\t\tPeriod = \"${NumberSecs}s\", // Periodo de tiempo para hacer peticiones",
			"\t\t\t\tLimit = ${Petitions}         // Numero de peticiones durante el periodo de tiempo",
			"\t\t\t}",
			"\t\t};",
			"\t});",
			"} // Remember adding builder.Services.ConfigureRateLimiting(); and builder.Services.AddAutoMapper(Assembly.GetEntryAssembly()); and app.UseRateLimiting(); to Program.cs"
		],
		"description": "Configure Rate Limiting using ASP.NET Core middleware"
	},
	"AddApplicationServices": {
		"prefix": "Gen-AddApplicationServices-InApplication",
		"body": [
			"public static void AddApplicationServices(this IServiceCollection services)",
			"{",
			"\tservices.AddScoped<IUnitOfWork, UnitOfWork>();",
			"} // Remember to add builder.Services.AddApplicationServices(); to Program.cs"
		],
		"description": "Agregar servicios de aplicación al contenedor de dependencias"
	},
	"Add Packages": {
		"prefix": "Gen-NuGetPackages",
		"body": [
			"dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.10",
			"dotnet add package Microsoft.EntityFrameworkCore --version 7.0.10",
			"dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.10",
			"dotnet add package Microsoft.Extensions.DependencyInjection --version 7.0.0",
			"dotnet add package System.IdentityModel.Tokens.Jwt --version 6.32.3",
			"dotnet add package Serilog.AspNetCore --version 7.0.0",
			"dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 12.0.1",
			"dotnet add package AspNetCoreRateLimit --version 5.0.0",
			"--",
			"dotnet add package Pomelo.EntityFrameworkCore.MySql --version 7.0.0",
			"dotnet add package Microsoft.EntityFrameworkCore --version 7.0.10",
			"dotnet add package CsvHelper --version 30.0.1"
		],
		"description": "Agregar múltiples paquetes NuGet al proyecto"
	},
	"GetAllAsyncMethod": {
		"prefix": "Gen-GetAllAsyncMethod-InRepository",
		"body": [
			"public override async Task<IEnumerable<${Entity}>> GetAllAsync()",
			"{",
			"\treturn await _context.${Entities}",
			"\t\t\t\t.Include(c => c.${includedEntity})",
			"\t\t\t\t.ToListAsync();",
			"}"
		],
		"description": "Método para obtener todos los registros de la entidad con inclusión"
	},
	"GetAllAsyncMethodForRegistros": {
		"prefix": "Gen-GetAllAsyncMethod-ForRegistros-InRepository",
		"body": [
			"public override async Task<(int totalRegistros, IEnumerable<${Entity}> registros)> GetAllAsync(",
			"\tint pageIndex,",
			"\tint pageSize,",
			"\tstring search",
			")",
			"{",
			"\tvar query = _context.${Entities} as IQueryable<${Entity}>;",
			"",
			"\tif (!string.IsNullOrEmpty(search))",
			"\t{",
			"\t\tquery = query.Where(p => p.${varQuery}.ToLower().Contains(search)); // If necesary add .ToString() after varQuery",
			"\t}",
			"\tquery = query.OrderBy(p => p.Id);",
			"",
			"\tvar totalRegistros = await query.CountAsync();",
			"\tvar registros = await query",
			"\t\t\t\t\t.Include(p => p.${includedEntity})",
			"\t\t\t\t\t.Skip((pageIndex - 1) * pageSize)",
			"\t\t\t\t\t.Take(pageSize)",
			"\t\t\t\t\t.ToListAsync();",
			"\treturn (totalRegistros, registros);",
			"}"
		],
		"description": "Método para obtener registros paginados con búsqueda en la entidad"
	},
	"Pager Class": {
		"prefix": "Gen-PagerClass-InPager",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"",
			"namespace ApiAnimals.Helpers;",
			"",
			"public class Pager<T> where T : class",
			"\t{",
			"\tpublic string Search { get; set; }",
			"\tpublic int PageIndex { get; set; }",
			"\tpublic int PageSize { get; set; }",
			"\tpublic int Total { get; set; }",
			"\tpublic List<T> Registers { get; private set; }",
			"",
			"\tpublic Pager()",
			"\t{",
			"\t}",
			"",
			"\tpublic Pager(List<T> registers, int total, int pageIndex, int pageSize, string search)",
			"\t{",
			"\t\tRegisters = registers;",
			"\t\tTotal = total;",
			"\t\tPageIndex = pageIndex;",
			"\t\tPageSize = pageSize;",
			"\t\tSearch = search;",
			"\t}",
			"",
			"\tpublic int TotalPages",
			"\t{",
			"\t\tget { return (int)Math.Ceiling(Total / (double)PageSize); }",
			"\t\tset { this.TotalPages = value; }",
			"\t}",
			"",
			"\tpublic bool HasPreviousPage",
			"\t{",
			"\t\tget { return (PageIndex > 1); }",
			"\t\tset { this.HasPreviousPage = value; }",
			"\t}",
			"",
			"\tpublic bool HasNextPage",
			"\t{",
			"\t\tget { return (PageIndex < TotalPages); }",
			"\t\tset { this.HasNextPage = value; }",
			"\t}",
			"}"
		],
		"description": "Clase Pager genérica para la paginación de registros"
	},
	"Params Class": {
		"prefix": "Gen-ParamsClass-InParams",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"",
			"namespace ApiAnimals.Helpers;",
			"",
			"public class Params",
			"{",
			"\tprivate int _pageSize = 5;",
			"\tprivate const int MaxPageSize = 50;",
			"\tprivate int _pageIndex = 1;",
			"\tprivate string _search;",
			"",
			"\tpublic int PageSize",
			"\t{",
			"\t\tget => _pageSize;",
			"\t\tset => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
			"\t}",
			"",
			"\tpublic int PageIndex",
			"\t{",
			"\t\tget => _pageIndex;",
			"\t\tset => _pageIndex = (value <= 0) ? 1 : value;",
			"\t}",
			"",
			"\tpublic string Search",
			"\t{",
			"\t\tget => _search;",
			"\t\tset => _search = (!String.IsNullOrEmpty(value)) ? value.ToLower() : \"\";",
			"\t}",
			"}"
		],
		"description": "Clase Params para definir parámetros de paginación y búsqueda"
	}
	
}